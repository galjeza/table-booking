generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
    id  Int     @id @default(autoincrement())
    Name    String?
    LastName String?
    Email   String  @unique
    PhoneNumber String  @unique
    Type     UserType    @default(USER)
    PasswordHash String @unique
    PasswordSalt String @unique

    /// Same User can have multiple Bookings
    BookedLocation UserBooked[]

    /// Same User can have own multiple locations
    OwnedLocation UserOwnLocation[]
}

enum UserType {
    USER
    ADMIN
}

model Location {
    id Int @id @default(autoincrement())
    Name String?
    Description String?
    Phone String?

    //Atrubites for Address
    Street String?
    Country String?

    /// Same Location can have own multiple Tables
    Tables TableAtLocation[]

    /// Same Location be owned by multiple people
    UserOwned UserOwnLocation[]

    /// Same Location have multiple schedules
    LocationHours LocationHours[]
}

model LocationHours {
    id Int @id @default(autoincrement())
    DayInWeek Int?
    OpenTime DateTime @default(now())
    CloseTime DateTime @default(now())

    /// Multiple Schedules can for the same Location
    Location Location @relation(fields: [LocationId], references: [id])
    LocationId Int
}

model UserBooked {
    id Int @id @default(autoincrement())
    DayInWeek Int?
    StartTime DateTime @default(now())
    Durration Int?

    /// User can book multiple Tables
    TablesBooked BookedTablesAtLocation[]

    /// Multiple Bookings can have same user
    User User @relation(fields: [UserId], references: [id])
    UserId Int
}

model TableAtLocation {
    id Int @id @default(autoincrement())
    NumberOfSeats Int
    IsBooked Boolean @default(false)

    /// One table can be booked at a time
    BookedAtLocation BookedTablesAtLocation?

    /// Multiple Tables can be owned by same Location
    Location Location @relation(fields: [LocationId], references: [id])
    LocationId Int
}

model BookedTablesAtLocation {
    id Int @id @default(autoincrement())

    /// Multiple Booked Tables can have same UserBooked
    UserBooked UserBooked @relation(fields: [UserBookedId], references: [id])
    UserBookedId Int

    /// Tables can be booked from same Location
    Table TableAtLocation @relation(fields: [TableId], references: [id])
    TableId Int @unique
}

model UserOwnLocation {
    id Int @id @default(autoincrement())
    Privilage Type @default(USER)

    /// Multiple Users can be part of same UserOwnLocation
    User User @relation(fields: [UserId], references: [id])
    UserId Int

    /// Multiple Locations can be part of same UserOwnLocation
    Location Location @relation(fields: [LocationId], references: [id])
    LocationId Int
}

enum Type {
    USER
    ADMIN
    OWNER
}
